package test;

import java.util.concurrent.TimeUnit;

/**
 * 8s锁
 * 3、增加一个普通方法后，两个线程先打印 发短信还是打电话？1 hello  2 发短信
 * 4、两个对象，两个同步方法，两个线程先打印 发短信还是打电话？1 打电话 2 发短信
 *
 */
public class Test2 {
    public static void main(String[] args) {
        //  两个对象，两把锁!
        Phone2 phone1 = new Phone2();
        Phone2 phone2 = new Phone2();
        new Thread(() -> {
            phone1.sends();
        },"A").start();
        try {
            TimeUnit.SECONDS.sleep(1);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        new Thread(() -> {
            phone2.call();
        },"A").start();
    }
}

class Phone2 {
    // synchronized所得对象是方法的调用者
    public synchronized void sends() {
        try {
            TimeUnit.SECONDS.sleep(4);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("发短信");
    }
    public synchronized void call() {

        System.out.println("打电话");
    }
    public void hello() {
        System.out.println("hello");
    }
}
