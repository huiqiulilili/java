package future;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;

/**
 * 异步调用：CompletableFuture
 * 异步执行
 * 成功回调
 * 失败回调
 */
public class Demo01 {
    public static void main(String[] args) throws ExecutionException, InterruptedException {
        //没有返回值的runAsync  异步回调
//        CompletableFuture<Void> completableFuture =  CompletableFuture.runAsync(()->{
//            try {
//                TimeUnit.SECONDS.sleep(2);
//            } catch (InterruptedException e) {
//                e.printStackTrace();
//            }
//            System.out.println(Thread.currentThread().getName()+"runAsync");
//        });
//        completableFuture.get();//阻塞获取执行结果

        //有返回值的  supplyAsync  异步回调
        CompletableFuture<Integer> completableFuture =   CompletableFuture.supplyAsync(()->{
            System.out.println(Thread.currentThread().getName()+"completableFuture");
            int i = 10/0;
            return 1024;
        });

        //
        completableFuture.whenComplete((t,u)->{
            System.out.println("t:"+t+"u:"+u);//t正常的返回结果 u错误信息
        }).exceptionally((e)->{
//            e.printStackTrace();
            e.getMessage();
            return 233;//可以获取到错误的返回结果
        }).get();

    }
}
