package single;


import java.lang.reflect.Constructor;

//懒汉式
public class Lazy {

    private static boolean wjk = false;

    private Lazy() {
        synchronized (Lazy.class) {
            if(wjk == false) {
                wjk = true;
            }else {
                throw new RuntimeException("不要试图用反射来破坏");
            }
        }
    }

    private volatile static Lazy lazy;

    public static Lazy getInstance() {
        //双重检测锁模式的懒汉式单例：DCL懒汉式
        if(lazy == null) {
            synchronized (Lazy.class) {
                if (lazy == null) {
                    lazy = new Lazy();//不是原子性操作 1、分配内存空间 2、执行构造方法，初始化对象 3、把这个对象指向这个空间
                }
            }
        }
        return lazy;
    }

    //反射！
    public static void main(String[] args) throws Exception {
        Lazy instance = Lazy.getInstance();
        Constructor<Lazy> declaredConstructor = Lazy.class.getDeclaredConstructor();
        declaredConstructor.setAccessible(true);
        Lazy instance2 = declaredConstructor.newInstance();
        System.out.println(instance);
        System.out.println(instance2);
    }
}
