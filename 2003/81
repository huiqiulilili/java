package pool;

import java.util.concurrent.*;

//new ThreadPoolExecutor.AbortPolicy()//不处理这个人，抛出异常
//new ThreadPoolExecutor.CallerRunsPolicy()//哪里来的去哪里
//new ThreadPoolExecutor.DiscardPolicy()队列满了，丢掉任务不会抛出异常
//new ThreadPoolExecutor.DiscardOldestPolicy()队列满了，尝试和最早的竞争,也不会抛出异常
public class Demo1 {
    public static void main(String[] args) {
//        ExecutorService threadpool = Executors.newSingleThreadExecutor();//单个线程
//             ExecutorService threadpool = Executors.newFixedThreadPool(5);//创建一个固定的线程池的大小
//        ExecutorService threadpool = Executors.newCachedThreadPool();//可以伸缩的，遇强则强，遇弱则弱
        //自动定义线程池

        //最大线程该如何定义
        //1、CPU密集型，几核就定义为几，可以保证CPU效率最高
        //2、IO密集型  >  判断你的程序中十分消耗IO的线程
        //      程序    15个大型任务   IO十分占资源
        //获取CPU的核数
        System.out.println(Runtime.getRuntime().availableProcessors());


        ExecutorService threadpool = new ThreadPoolExecutor(
                2,5,3, TimeUnit.SECONDS
                ,new LinkedBlockingDeque<>(3),new ThreadPoolExecutor.DiscardOldestPolicy());//队列满了，尝试和最早的竞争,也不会抛出异常

        try {
            //最大承载：Deque+Max  8
            //超过最大承载：java.util.concurrent.RejectedExecutionException
            for (int i = 1; i <= 9; i++) {
                //使用了线程池之后要使用线程池来创建
                threadpool.execute(()->{
                    System.out.println(Thread.currentThread().getName()+"ok");
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            //线程池用完，程序结束，关闭线程池
            threadpool.shutdown();
        }

    }
}
