package com_01;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class ReflectDemo05 {
    public static void main(String[] args) throws Exception {
       Class c = Class.forName("com_01.Person");
       //获取所有的方法
//        Method[] methods = c.getMethods();// 获取自己的包括父亲的公共方法
        /*Method[] methods = c.getDeclaredMethods();// 获取自己的所有方法
        for(Method method : methods) {
            System.out.println(method);
        }*/

        Constructor constructor = c.getConstructor();
        Object obj = constructor.newInstance();


        //public Method getMethod(String name, 类<?>... parameterTypes)
        // 第一个参数表示方法名，第二个参数表示的是方法的参数的class类型
        // 获取单个方法并使用
        //private void show()
        Method m1 = c.getDeclaredMethod("show");
        m1.setAccessible(true);
       //Object invoke(Object obj, Object... args)
        // 返回值是Object接受
        //第一个参数表示的是对象是谁，第二个参数表示的是调用该方法的实际参数
        m1.invoke(obj);//调用obj对象的m1方法



        //public void method(String s)
        Method m2 = c.getMethod("method",String.class);
        m2.invoke(obj,"hello");

        //public String getString(String s,int i)

        Method m3 = c.getMethod("getString",String.class,int.class);
        Object invoke = m3.invoke(obj, "hello", 100);
        System.out.println(invoke);
    }
}
