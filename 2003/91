package test;

import java.util.concurrent.TimeUnit;

/**
 * 8s锁
 * 7、增加一个两个静态的同步方法，两个线程先打印 发短信还是打电话？1 打电话   2  发短信
 * 8、两个对象，两个静态的同步方法，两个线程先打印 发短信还是打电话？1 打电话 2 发短信
 *
 */
public class Test4 {
    public static void main(String[] args) {
        //  两个对象的类模板只有一个，static，锁的是Class
        Phone4 phone1 = new Phone4();
        Phone4 phone2 = new Phone4();
        new Thread(() -> {
            phone1.sends();
        },"A").start();
        try {
            TimeUnit.SECONDS.sleep(1);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        new Thread(() -> {
            phone2.call();
        },"A").start();
    }
}

class Phone4 {
    // synchronized所得对象是方法的调用者
    // static静态方法，类一加载就有了！Class模板，锁的是Class
    //静态的同步方法 所得Class类模板
    public static synchronized void sends() {
        try {
            TimeUnit.SECONDS.sleep(4);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("发短信");
    }
    // 普通的同步方法 锁的调用者
    public  synchronized void call() {

        System.out.println("打电话");
    }
  /*  public void hello() {
        System.out.println("hello");
    }*/
}
