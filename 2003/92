package test;

import java.util.concurrent.TimeUnit;

/**
 * 8s锁
 * 5、一个静态的同步方法,一个普通的同步方法，两个线程先打印 发短信还是打电话？1发短信   2 打电话
 * 6、两个对象，两个静态的同步方法，两个线程先打印 发短信还是打电话？1 发短信 2 打电话
 *
 */
public class Test03 {
    public static void main(String[] args) {
        //  两个对象的类模板只有一个，static，锁的是Class
        Phone3 phone1 = new Phone3();
        Phone3 phone2 = new Phone3();
        new Thread(() -> {
            phone1.sends();
        },"A").start();
        try {
            TimeUnit.SECONDS.sleep(1);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        new Thread(() -> {
            phone2.call();
        },"A").start();
    }
}

class Phone3 {
    // synchronized所得对象是方法的调用者
    // static静态方法，类一加载就有了！Class模板，锁的是Class

    public static synchronized void sends() {
        try {
            TimeUnit.SECONDS.sleep(4);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("发短信");
    }

    public static synchronized void call() {

        System.out.println("打电话");
    }
  /*  public void hello() {
        System.out.println("hello");
    }*/
}
