package demo1;

import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

class Ticket{
    private int number = 30;
    Lock lock = new ReentrantLock();
    public void sale() {
        lock.lock();
        try{
            if(number > 0) {
                System.out.println("线程"+Thread.currentThread().getName()+"卖出"+(number--)+"张票"+"还剩下"+number);
            }
        }finally {
            lock.unlock();
        }
    }
}


public class SaleTicketDemo01 {
    public static void main(String[] args) {
        Ticket ticket = new Ticket();

        /*new Thread(new Runnable() {
            @Override
            public void run() {
                for (int i = 1; i <= 40 ; i++) {
                    ticket.sale();
                }

            }
        }, "A").start();

        new Thread(new Runnable() {
            @Override
            public void run() {
                for (int i = 1; i <= 40 ; i++) {
                    ticket.sale();
                }
            }
        }, "B").start();

        new Thread(new Runnable() {
            @Override
            public void run() {
                for (int i = 1; i <= 40 ; i++) {
                    ticket.sale();
                }
            }
        }, "C").start();*/
        // 前面代码的简化：
        new Thread(()->{ for (int i = 1; i <= 40 ; i++) { ticket.sale(); } },"A").start();
        new Thread(()->{ for (int i = 1; i <= 40 ; i++) { ticket.sale(); } },"B").start();
        new Thread(()->{ for (int i = 1; i <= 40 ; i++) { ticket.sale(); } },"C").start();
    }
}

