package ForkJoin;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.RecursiveTask;

/**
 * 求和计算的任务
 * //如何使用ForkJoin
 * 1、forkJoinPool通过他来执行
 * 2、计算任务forkjoinPool.execute(ForkJoinTask<?> task)
 * 3、计算类要继承ForkJoinTask
 */

public class ForkJoinDemo extends RecursiveTask<Long> {
    private Long start;//1
    private Long end;//1234567899876
    //临界值
    private long temp= 10000L;

    public ForkJoinDemo(long start, long end) {
        this.start = start;
        this.end = end;
    }

    public static void main(String[] args) throws ExecutionException, InterruptedException {
        tast2();
    }

    //计算方法
    @Override
    protected Long compute() {
        if(end - start < temp) {
            Long sum = 0L;
            for (Long i = start; i < end; i++) {
                sum+=i;
            }
            return sum;
        }else {//forkJoin
            long middle = (start + end)/2;//中间值
            ForkJoinDemo task1 = new ForkJoinDemo(start, middle);
            task1.fork();//拆分任务，把任务压入线程队列
            ForkJoinDemo task2 = new ForkJoinDemo(middle+1, end);
            task2.fork();////拆分任务，把任务压入线程队列

            return task1.join()+task2.join();

        }
    }
    public static void tast2() throws ExecutionException, InterruptedException {
        long start = System.currentTimeMillis();

        ForkJoinPool forkJoinPool = new ForkJoinPool();
        ForkJoinTask<Long> task = new ForkJoinDemo(0L, 100000000);
        forkJoinPool.execute(task);

        ForkJoinTask<Long> submit = forkJoinPool.submit(task);//提交任务
        submit.get();

        long end = System.currentTimeMillis();
        System.out.println("sum="+"时间:"+(end - start));
    }
}
