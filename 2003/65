package volatileDemo;

import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;


public class Test1 {
    public static void main(String[] args) {
        final Mydate mydate = new Mydate();
        for (int i = 0; i < 20; i++) {
            new Thread(new Runnable() {
                public void run() {
                    for (int j = 1; j <= 1000; j++) {
                        mydate.add();
                        mydate.addMyAtomic();
                    }
                }
            },String.valueOf(i)).start();
        }
        //需要等待20个线程都计算完了，再用main线程取得最终的结果
        while (Thread.activeCount() > 2) {
            Thread.yield();
        }
        System.out.println(Thread.currentThread().getName()+" int type finally number:"+mydate.number);
        System.out.println(Thread.currentThread().getName()+" AtomicInteger type,finally number:"+mydate.atomicInteger);
    }

    /**
     * 验证volatile的可见性
     * 加入int number = 0；number变量之前没有添加volatile关键字修饰，没有可见性
     *
     */
    public void test() {
        final Mydate mydate = new Mydate();
        new Thread(new Runnable() {
            public void run() {
                System.out.println(Thread.currentThread().getName()+"come in");
                try{
                    TimeUnit.SECONDS.sleep(3);
                }catch (Exception e) {
                    e.printStackTrace();
                }
                mydate.addTo60();
                System.out.println(Thread.currentThread().getName()+"update number value:" + mydate.number);
            }
        },"AAA").start();
        while (mydate.number == 0) {
            //main线程就一直在这里等待，直到number值不在等于0
            System.out.println("hh");
        }
        System.out.println(Thread.currentThread().getName()+"misson is over,main get number value"+mydate.number);
    }

/**
 * 验证volatile的原子性？
 */

}

class Mydate{
    volatile int number = 0;
    public  void addTo60() {
        this.number = 60;
    }

    //加了关键字volatile修饰的
    public void add() {
        number++;
    }

    AtomicInteger atomicInteger = new AtomicInteger();
    public void addMyAtomic() {
        atomicInteger.getAndIncrement();
    }
}
