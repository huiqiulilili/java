package 链表面试题;
/*
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
		if (l1 == null) { return l2; }
		if (l2 == null) { return l1; }

		ListNode cur1 = l1;
		ListNode cur2 = l2;
		ListNode result = null;
		ListNode last = null;

		while (cur1 != null && cur2 != null) {
			if (cur1.val <= cur2.val) {
				ListNode next = cur1.next;

				// 把 cur1 尾插到 result 上
				// 两种情况：链表为空链表/非空链表
				// 1. 空链：头插
				// 2. 非空链表：1）确定最后一个结点（利用last记录）
				//              2）最后一个结点的 next = cur1
				if (result == null) {
					cur1.next = result;	// 可选的
					result = cur1;
				} else {
					cur1.next = null;	// 可选的
					last.next = cur1;
				}
				// 保证 last 永远指向最后一个结点
				last = cur1;

				cur1 = next;
			} else {
				ListNode next = cur2.next;	// 让循环走起来

				// 把 cur2 尾插到 result 上
				// 两种情况：链表为空链表/非空链表
				// 1. 空链：头插
				// 2. 非空链表：1）确定最后一个结点（利用last记录）
				//              2）最后一个结点的 next = cur2
				if (result == null) {
					cur2.next = result;	// 可选的
					result = cur2;
				} else {
					cur2.next = null;	// 可选的
					last.next = cur2;
				}
				// 保证 last 永远指向最后一个结点
				last = cur2;

				cur2 = next;	// 让循环走起来
			}
		}

		// cur		current	当前
		// 或者 cur1 为空 或者 cur2 为空
		if (cur1 != null) {
			last.next = cur1;
		} else {
			last.next = cur2;
		}

		return result;
	}
 */
public class MergeTwoLists {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        return null;
    }
}
