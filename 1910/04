public class LinkedListDemo implements List{
    Node head = null;
    Node last = null;
    int size = 0;

    @Override
    public boolean add(int element) {
        add(0,element);
        return true;
    }

    @Override
    public boolean add(int index, int element) {
        //下标不合法的情况
        if(index < 0 || index > size){
            return false;
        }
        if(index == 0){
            head = new Node(element,null,head);
            if(head.next != null){
                head.next.prev = head;
            }
            if(size == 0){
                last = head;
            }
            size++;
            return true;
        }

        //插入最后
        if(index == size){
            last = new Node(element,last,null);
            if(last.prev!= null){
                last.prev.next = last;
            }
            if(size == 0){
                head = last;
            }
            size++;
            return true;
        }
        //正常插入
        Node cur = head;
        //找到index下标的元素
        Node node = getNode(index);
        Node newNode = new Node(element,node.prev,node);
        node.prev.next = newNode;
        node.prev = newNode;
        size++;
        return true;
    }

    private Node getNode(int index) {
        if(size/2 > index){
            Node cur = head;
            for(int i = 0;i < index;i ++){
                cur = cur.next;
            }
            return cur;
        }else{
            Node cur = last;
            for(int i = 0;i < size - index - 1;i++){
                cur = cur.prev;
            }
            return cur;
        }
    }

    @Override
    public int get(int index) {
        if (index < 0 || index >= size) {
            return -1;
        }
        return getNode(index).val;
    }

    @Override
    public int set(int index, int val) {
        if (index < 0 || index >= size) {
            return -1;
        }
        int oldValue = getNode(index).val;
        getNode(index).val = val;
        return oldValue;
    }

    @Override
    public int remove(int index) {
        if (index < 0 || index >= size) {
            return -1;
        }
        Node node = getNode(index);
        if(node.prev != null){
            node.prev.next = node.next;
        }else{
            head = node.next;
        }
        if(node.next != null){
            node.next.prev = node.prev;
        }else{
            last = node.prev;
        }
        size--;
        return node.val;

    }

    @Override
    public int size() {
        return size;
    }

    @Override
    public boolean isEmpty() {
        return size == 0;
    }
}
