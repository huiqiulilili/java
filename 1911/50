package lesson7;

public class MyBlockingQueue<E> {
    private Object[] elements;
    private int addIndex;
    private int takeIndex;
    private int size;
    public MyBlockingQueue(int capacity){
        elements = new Object[capacity];
    }

    public synchronized E poll(){
        E element = null;
        try {
            if(size == 0){
                wait();
            }
            element = (E)elements[takeIndex];
            takeIndex = (takeIndex+1)%elements.length;
            size--;
            notifyAll();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return element;
    }

    public synchronized void add(E e){
        try {
            if(addIndex == elements.length){
                wait();
            }
            elements[addIndex] = e;
            addIndex = (addIndex+1) % elements.length;
            size++;
            notifyAll();
        } catch (InterruptedException ex) {
            ex.printStackTrace();
        }
    }

    public static void main(String[] args) {
        MyBlockingQueue queue = new MyBlockingQueue(10);
        for(int i = 0;i < 20;i ++){
            new Thread(new Runnable() {
                @Override
                public void run() {
                    for(int j = 0;j < 1000;j ++){

                    }
                }
            }).start();
        }
    }
}
