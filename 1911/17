package lesson2;

/**
 * 中断线程：interrupt
 * 在sleep下发生中断
 */
public class InterruptThread {
    public static void main(String[] args) {
        Thread thread =  new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                //调用sleep方法，wait方法，join方法时，线程进入阻塞状态，此时也是可以中断，
                //中断后抛出异常，抛出异常后标志位会重置
                    Thread.sleep(5000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
        thread.start();
        //相对自己定义的优势在于：可以中断wait,join sleep 的阻塞线程
        thread.interrupt();


        Thread thread2 =  new Thread(new Runnable() {
            @Override
            public void run() {
                for (int i = 0;i < 10;i ++){
                    //boolean tmp = 标志位
                    //标志位=false
                    //return tmp;
                    //作用：重置标志位为false，并且返回之前标志位
                    //boolean b = Thread.interrupted();
                    //获取当前标志位
                    boolean b = Thread.currentThread().isInterrupted();
                    System.out.println(b);
                }
            }
        });
        //线程创建之后标志位为false
        thread2.start();
        thread2.interrupt();//修改标志位=true
    }
}
