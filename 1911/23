package lesson4;
/**
 * 原子性：在某个环境下，不可被分割（包括被中断、造成结果不正确）的操作
 *  对于共享变量，基本数据北行的赋值操作是原子性，但不包括64位long/double操作
 *  经典的非原子性的单条指令：n++/n--/new Object()
 * 可见性：工作内存 和   主内存（堆/方法区/常量池）
 *  工作内存和主内存的一致性（对于每个线程来说，共享变量在线程之间也是不可见的）
 * 有序性：DataSource ds = new DataSource();
 *  1.分配该对象的内存空间
 *  2.对这个对象进行初始化操作
 *  3.把这个对象付给ds引用
 *java对象：类（特殊的对象）和实例对象
 *
 * syschronized(同步互斥)：重点理解锁的是那个对象
 * syschronized静态同步方法：锁定的是当前类对象
 * syschronized实例方法：锁定的是当前对象（this）
 * syschronized（obj）同步代码块：锁定的是obj对象
 * 锁定对象的所有同步的地方，都会同步互斥
 *
 */

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

public class SaftThread {
    public static int COUNT;

    public static void main(String[] args) {
        //启动20个线程，每个线程对COUNT进行++操作10000次
        Object o  = new Object();
        for(int i = 0; i < 20;i ++) {
           new Thread(new Runnable() {
                @Override
                public void run() {
                    for(int i = 0;i < 10000;i ++) {
                       // COUNT++;
                        //第一种：静态类对象锁定
                        increment();
                        decrement();
                        //第二种：对实例对象锁定
                        /*synchronized (o){
                            COUNT++;
                        }*/
                    }
                }
            }).start();
        }
        while (Thread.activeCount() > 2){
            Thread.yield();
        }
        System.out.println(COUNT);

    }
    /*public synchronized static void increment(){
        COUNT++;
    }*/

    public static synchronized  void increment(){
        synchronized (SaftThread.class){
            COUNT++;
        }
    }

    public synchronized static void decrement(){
        COUNT--;
    }
/*
    public synchronized void increment2(){

    }

    public   void increment3(){
        synchronized (this){

        }
    }*/
}


