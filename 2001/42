
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class ReflectDemo_06 {
    public static void main(String[] args) throws Exception {
        Class c = Class.forName("反射.Person");

        /*Method[] methods = c.getDeclaredMethods();

        for(Method method : methods) {
            System.out.println(method);
        }*/

        Constructor con = c.getConstructor();
        Object obj = con.newInstance();


        Method m1 = c.getMethod("show");
        m1.invoke(obj);

        System.out.println("--------------");

        Method m2 = c.getMethod("method", String.class);
        m2.invoke(obj," hello");

        System.out.println("-----------");

        Method m3 = c.getMethod("getString", String.class, int.class);
        /*Object objString = m3.invoke(obj, "hello", 100);
        System.out.println(objString);*/
        String s = (String) m3.invoke(obj,"hello",100);
        System.out.println(s);

        System.out.println("-------------");
        Method m4 = c.getDeclaredMethod("function");
        m4.setAccessible(true);
        m4.invoke(obj);
    }
}
