import java.util.*;

public class Practice {
    class Elements{
        int level;
        TreeNode node;
    }
    public List<List<Character>> levelOrder(TreeNode root){
        Queue<Elements> queue = new LinkedList<>();
        List<List<Character>> reList = new ArrayList<>();
        if(root == null){
            return reList;
        }
        Elements e = new Elements();
        e.level = 0;
        e.node = root;
        queue.add(e);

        while(!(queue.isEmpty())){
            Elements front = queue.poll();
            if(front.level == reList.size()){
                reList.add(new ArrayList<>());
            }
            reList.get(front.level).add(front.node.val);

            if(front.node.left != null){
                Elements l = new Elements();
                l.node = front.node.left;
                l.level = front.level + 1;
                queue.add(l);
            }

            if(front.node.right != null){
                Elements r = new Elements();
                r.node = front.node.right;
                r.level = front.level + 1;
                queue.add(r);
            }
        }
        return reList;
    }

//    public List<List<Character>> levelOrder(TreeNode root){
//        List<List<Character>> retList = new ArrayList<>();
//        if(root == null){
//            return retList;
//        }
//
//    }

    public boolean isCompete(TreeNode root){
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while(true){
            TreeNode front = queue.poll();
            if(front == null){
                break;
            }
            queue.add(front.left);
            queue.add(front.right);
        }
        while (!queue.isEmpty()){
            TreeNode node = queue.poll();
            if(node != null){
                return false;
            }
        }
        return true;
    }

    public void potOrder(TreeNode root){
        Stack<TreeNode> stack = new Stack<>();
        TreeNode cur = root;
        TreeNode last = null;
        while(cur != null){
            stack.add(cur);
            cur = cur.left;
        }

        TreeNode top = stack.peek();
        if(top.right == null || top.right == last){
            TreeNode node =  stack.pop();
            System.out.println(node.val);
            last = top;
        }else{
            cur = cur.right;
        }

    }

}
